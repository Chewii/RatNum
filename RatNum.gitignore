
public class RatNum {

    private int numerator;
    private int denominator;

     public static void main(String[] args) {

    }

    public String toString(){

	String divisionFormat = String.valueOf(this.getNumerator()) + "/" + String.valueOf(this.getDenominator());
	
	return divisionFormat;
    }

    public double toDouble(){

	double doubleFormat = (double)this.numerator/(double)this.denominator;
       	return doubleFormat;

    }

    public static RatNum parse(String s){

    	String numerator = "";
    	String denomenator = "";
    	int parsedDenomenator = 0;
    	int parsedNumerator = 0;
    	int lengthOf = s.length();
    	int slash = s.indexOf("/");

    	try {
    		if(s.contains("/")){
    			numerator = s.substring(0,slash);
    			denomenator = s.substring(slash + 1, lengthOf);
    			parsedNumerator = Integer.parseInt(numerator);
    			parsedDenomenator = Integer.parseInt(denomenator);
    		}else {
    			numerator = s.substring(0,lengthOf);
    			parsedNumerator = Integer.parseInt(numerator);
    			parsedDenomenator = 1;
    		}
    	}catch(NumberFormatException e){
    		throw new NumberFormatException("For input string " + s);
    	}
    	RatNum r = new RatNum(parsedNumerator,parsedDenomenator);
    	return r;
    }
    
    public boolean lessThan(RatNum r){

	if(((double)r.getNumerator() / r.getDenominator()) > ((double)this.getNumerator() / this.getDenominator())){
    
	    return true;
	}
	return false;
    }

    public RatNum add(RatNum r){

	int newNum;
	int newDenom;
	
	if(r.getDenominator() == this.getDenominator()){
	    newNum = r.getNumerator() + this.getNumerator();
	    newDenom = this.getDenominator();

	} else {

	    newNum = (r.getNumerator() * this.getDenominator()) + (this.getNumerator() * r.getDenominator()); 
	    newDenom = r.getDenominator() * this.getDenominator();
	    
	}
	
	RatNum a = new RatNum(newNum, newDenom);

	return a;
    }


    public RatNum sub(RatNum r){ 

    	int newNum;
    	int newDenom;

    	if(r.getDenominator() == this.getDenominator()){
    		newNum = r.getNumerator() - this.getNumerator();
    		newDenom = this.getDenominator();

    	} else {

    		newNum = (this.getNumerator() * r.getDenominator()) - (r.getNumerator() * this.getDenominator()); 
    		newDenom = r.getDenominator() * this.getDenominator();

    	}

    	RatNum sub = new RatNum(newNum, newDenom);

    	return sub;
    }
       
    public RatNum mul(RatNum r){

    	int newNum = r.getNumerator() * this.getNumerator();
    	int newDenom = r.getDenominator() * this.getDenominator();

    	RatNum multi = new RatNum(newNum, newDenom);

    	return multi;
    }
    
    public RatNum div(RatNum r){ 

    	int numerator;
    	int denomenator;
    	int newNum;
    	int newDenom;

    	denomenator = this.getNumerator();
    	numerator = this.getDenominator();

    	newDenom = r.getNumerator() * this.getDenominator();
    	newNum = r.getDenominator() * this.getNumerator();

    	RatNum devi = new RatNum(newNum, newDenom);

    	return devi;
    }
    

    public RatNum (String s){
	
	RatNum tempRat = new RatNum(parse(s));
	numerator = tempRat.getNumerator();
	denominator = tempRat.getDenominator();
    }


    public RatNum (){

	numerator = 0;
	denominator = 1;

    }

    public RatNum(int a){
	
	numerator = a;
	denominator = 1;
    }

    public RatNum(int a, int b){

    	if(b < 0){
    		b = Math.abs(b);
    		a = a * -1;	
    	} 

    	if(b == 0){
    		throw new NumberFormatException("Denominator = 0");

    	}else if(gcd(a,b) == 0){
    		numerator = a;
    		denominator = b;

    	}else{
    		numerator = a/gcd(a,b);
    		denominator = b/gcd(a,b);
    	}
    }

    public RatNum(RatNum r){

	numerator = r.getNumerator();
	denominator = r.getDenominator();

    }

    public boolean equals(Object r){
	if(r != null){
       
	    if(r instanceof RatNum){
		RatNum o = (RatNum) r;

		if(((double)o.getNumerator() / o.getDenominator()) == ((double)this.getNumerator() / this.getDenominator())){
		    return true;
		} 

	    }
	    return false;
	}	
	return false;
    }
   

    public int getNumerator(){
	return this.numerator;  
    }

    public int getDenominator(){
	return this.denominator;
    }
    
    
    public static int gcd(int m,int n){
	boolean getGcd = false; // här sätter vi booleanen getGcd till false för att kontrollera vi har hittat gcd.

	m = Math.abs(m); //Tar absolutbeloppet av m
	n = Math.abs(n); //Tar absolutbeloppet av n
	
	if(m == 0 && n == 0){
	    throw new IllegalArgumentException();
	    
	    //Om n = 0 och m = 0 "kastar" vi ett nytt exception.

	}else {
	    
	    int r = 0;
	    
	    while(getGcd == false){
		//Här är en while-loop. Som körs tills getGcd är sann, dvs då vi har hittat vår största gemensamma nämnare.

		if(n == 0){
		    //   System.out.println("Största gemensamma nämnare är " + m + " ");
		    
		    getGcd = true;
		    return m;
     
		   
		    //Om n är noll har vi fått vår största gemensamma nämnare. Vi sätter då getGcd till sann för att avsluta While-loopen.
		}
		
		r = m % n;

		m = n;
		n = r;
		
		//Här följer vi Euklides algoritm för att ta reda på största gemensamma nämnare.
		
	    }
	}
	return 0;
	}
}

