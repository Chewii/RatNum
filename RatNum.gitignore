
public class RatNum {

    private int numerator;
    private int denominator;

     public static void main(String[] args) {

	 // System.out.print(toDouble(1,3));
    }

    public static String toString(int a,int b){

	String divisionFormat = String.valueOf(a) + "/" + String.valueOf(b);
	return divisionFormat;
    }

    public double toDouble(){

	double doubleFormat = (double)this.numerator/(double)this.denominator;
       	return doubleFormat;

    }

    public static RatNum parse(String s){

    	String numerator = "";
    	String denomenator = "";
    	int parsedDenomenator = 0;
    	int parsedNumerator = 0;
    	int lengthOf = s.length();
    	int slash = s.indexOf("/");

    	try {
    		if(s.contains("/")){
    			numerator = s.substring(0,slash);
    			denomenator = s.substring(slash + 1, lengthOf);
    			parsedNumerator = Integer.parseInt(numerator);
    			parsedDenomenator = Integer.parseInt(denomenator);
    		}else {
    			numerator = s.substring(0,lengthOf);
    			parsedNumerator = Integer.parseInt(numerator);
    			parsedDenomenator = 1;
    		}
    	}catch(NumberFormatException e){
    		throw new NumberFormatException("For input string " + s);
    	}
    	RatNum r = new RatNum(parsedNumerator,parsedDenomenator);
    	return r;
    }
    
    public boolean lessThan(RatNum r){
	RatNum o = (RatNum) r;
	if((o.getNumerator() / o.getDenominator()) > (this.getNumerator() / this.getDenominator())){
    
	    return true;
	}
	return false;
    }

    public RatNum add(RatNum r){
	
	RatNum o = (RatNum) r; 

	int newNum;
	int newDenom;
	
	if(o.getDenominator() == this.getDenominator()){
	    newNum = o.getNumerator() + this.getNumerator();
	    newDenom = this.getDenominator();

	} else {

	    newNum = (o.getNumerator() * this.getDenominator()) + (this.getNumerator() * o.getDenominator()); 
	    newDenom = o.getDenominator() * this.getDenominator();
	    
	}
	
	RatNum a = new RatNum(newNum, newDenom);

	return a;
    }


    public RatNum sub(RatNum r){

    	RatNum o = (RatNum) r; 

    	int newNum;
    	int newDenom;

    	if(o.getDenominator() == this.getDenominator()){
    		newNum = o.getNumerator() - this.getNumerator();
    		newDenom = this.getDenominator();

    	} else {

    		newNum = (o.getNumerator() * this.getDenominator()) - (this.getNumerator() * o.getDenominator()); 
    		newDenom = o.getDenominator() * this.getNumerator();

    	}

    	RatNum sub = new RatNum(newNum, newDenom);

    	return sub;
    }
       
    public RatNum mul(RatNum r){


    	RatNum o = (RatNum) r;

    	int newNum = o.getNumerator() * this.getNumerator();
    	int newDenom = o.getDenominator() * this.getDenominator();

    	RatNum multi = new RatNum(newNum, newDenom);

    	return multi;
    }
    
    public RatNum div(RatNum r){

    	RatNum o = (RatNum) r; 

    	int numerator;
    	int denomenator;
    	int newNum;
    	int newDenom;

    	denomenator = this.getNumerator();
    	numerator = this.getDenominator();

    	newNum = o.getNumerator() * numerator;
    	newDenom = o.getDenominator() * denomenator;

    	RatNum devi = new RatNum(newNum, newDenom);

    	return devi;
    }
    

    public RatNum (String s){
	
	//	this(parse(s).getNumerator(),parse(s).getDenominator());
	RatNum tempRat = new RatNum(parse(s));
	numerator = tempRat.getNumerator();
	denominator = tempRat.getDenominator();
    }

    public RatNum (){

	numerator = 0;
	denominator = 1;

    }

    public RatNum(int a){
	
	numerator = a;
	denominator = 1;
    }

    public RatNum(int a, int b){

    	if(b < 0){
    		b = Math.abs(b);
    		a = a * -1;	
    	} 

    	if(b == 0){
    		throw new NumberFormatException("Denominator = 0");

    	}else if(gcd(a,b) == 0){
    		numerator = a;
    		denominator = b;

    	}else{
    		numerator = a/gcd(a,b);
    		denominator = b/gcd(a,b);
    	}
    }

    public RatNum(RatNum r){

	numerator = r.getNumerator();
	denominator = r.getDenominator();

    }

    public boolean equals(Object r){
	if(r == null){
	    if(r instanceof RatNum){
		RatNum o = (RatNum) r;
		if(o.getNumerator() == this.getNumerator() && o.getDenominator() == this.getDenominator()){
		    return true;
		} else if((o.getNumerator() - this.getNumerator() <= 0.0001) || (o.getNumerator() - this.getNumerator() >= -0.0001) &&
			  (o.getDenominator() - this.getDenominator() <= 0.0001) || (o.getDenominator() - this.getDenominator() >= -0.0001)){

		    return true;
		}
	    }
	    return false;
	}	
	return false;
    }
   

    public int getNumerator(){
	return this.numerator;  
    }

    public int getDenominator(){
	return this.denominator;
    }
    
    
    public static int gcd(int m,int n){
	boolean getGcd = false; // här sätter vi booleanen getGcd till false för att kontrollera vi har hittat gcd.

	m = Math.abs(m); //Tar absolutbeloppet av m
	n = Math.abs(n); //Tar absolutbeloppet av n
	
	if(m == 0 && n == 0){
	    throw new IllegalArgumentException();
	    
	    //Om n = 0 och m = 0 "kastar" vi ett nytt exception.

	}else {
	    
	    int r = 0;
	    
	    while(getGcd == false){
		//Här är en while-loop. Som körs tills getGcd är sann, dvs då vi har hittat vår största gemensamma nämnare.

		if(n == 0){
		    //   System.out.println("Största gemensamma nämnare är " + m + " ");
		    
		    getGcd = true;
		    return m;
     
		   
		    //Om n är noll har vi fått vår största gemensamma nämnare. Vi sätter då getGcd till sann för att avsluta While-loopen.
		}
		
		r = m % n;

		m = n;
		n = r;
		
		//Här följer vi Euklides algoritm för att ta reda på största gemensamma nämnare.
		
	    }
	}
	return 0;
	}
}

